import { ref } from 'vue'
import SessionService from 'src/services/SessionService'
import SocketService from 'src/services/SocketService'

/**
 * Composable pour g√©rer les contr√¥les organisateur
 * Extrait de SessionPlayPage.vue pour r√©utilisabilit√©
 */
export function useOrganizerControls(sessionId, isOrganizer, socketConnected) {
  // √âtat des contr√¥les organisateur
  const showOrganizerPanel = ref(false)
  const loadingNext = ref(false)
  const ending = ref(false)

  // M√©thodes de contr√¥le
  const nextQuestion = async () => {
    if (!isOrganizer.value) return

    try {
      loadingNext.value = true

      // Privil√©gier WebSocket
      if (socketConnected.value && SocketService.isSocketConnected()) {
        console.log('üîÑ Question suivante via WebSocket')
        const success = SocketService.nextQuestion(sessionId.value)
        if (!success) {
          throw new Error('√âchec envoi commande WebSocket')
        }
        // La r√©ponse sera g√©r√©e via les √©v√©nements WebSocket
      } else {
        console.log('üîÑ Question suivante via HTTP (fallback)')
        await SessionService.nextSessionQuestion(sessionId.value)
        loadingNext.value = false
      }
    } catch (error) {
      console.error('Erreur question suivante:', error)
      // Erreur g√©r√©e automatiquement par l'intercepteur global
      loadingNext.value = false
    }
  }

  const endSession = async () => {
    if (!isOrganizer.value) {
      console.log('‚ùå Non organisateur - fin de session refus√©e')
      return
    }

    try {
      ending.value = true
      console.log('üõë Tentative de fin de session:', sessionId.value)

      // Privil√©gier WebSocket
      if (socketConnected.value && SocketService.isSocketConnected()) {
        console.log('üîå Fin de session via WebSocket')
        const success = SocketService.endSession(sessionId.value)
        if (!success) {
          throw new Error("Impossible d'envoyer la commande via WebSocket")
        }
        // La fin sera g√©r√©e via les √©v√©nements WebSocket
      } else {
        console.log('üåê Fin de session via HTTP (fallback)')
        await SessionService.endGameSession(sessionId.value)
        ending.value = false
        console.log('‚úÖ Fin de session HTTP r√©ussie')
      }
    } catch (error) {
      console.error('Erreur fin de session:', error)
      // Erreur g√©r√©e automatiquement par l'intercepteur global
      ending.value = false
    }
  }

  // Configuration des √©v√©nements WebSocket pour l'organisateur
  const setupOrganizerSocketListeners = () => {
    // Nouvelle question - r√©initialiser l'√©tat de chargement
    SocketService.onGameNewQuestion(() => {
      loadingNext.value = false
    })

    // Session termin√©e - r√©initialiser l'√©tat
    SocketService.onGameSessionEnded(() => {
      ending.value = false
      loadingNext.value = false
    })

    // Optionnel : notification quand un participant r√©pond
    SocketService.onGameParticipantAnswered((data) => {
      if (isOrganizer.value) {
        // Notification discr√®te pour l'organisateur
        console.log(
          `üìù ${data.userName} a r√©pondu ${data.isCorrect ? 'correctement' : 'incorrectement'}`,
        )
      }
    })
  }

  return {
    // √âtat
    showOrganizerPanel,
    loadingNext,
    ending,

    // M√©thodes
    nextQuestion,
    endSession,
    setupOrganizerSocketListeners,
  }
}
