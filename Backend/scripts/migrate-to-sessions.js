const mongoose = require('mongoose');
require('dotenv').config();

// Import des mod√®les
const User = require('../models/User');
const Quiz = require('../models/Quiz');
const Question = require('../models/Question');
const GameSession = require('../models/GameSession');
const LobbyParticipant = require('../models/LobbyParticipant');
const GameParticipant = require('../models/GameParticipant');

async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connexion MongoDB √©tablie');
  } catch (error) {
    console.error('‚ùå Erreur connexion MongoDB:', error);
    process.exit(1);
  }
}

async function migrateToSessions() {
  console.log('üöÄ D√©but de la migration vers l\'architecture des sessions...\n');

  try {
    // 1. V√©rifier que les mod√®les sont bien charg√©s
    console.log('üìã √âtape 1 : V√©rification des mod√®les...');
    
    // Les index sont automatiquement cr√©√©s par Mongoose via les sch√©mas
    console.log('  ‚úÖ Mod√®les User, Quiz, GameSession, etc. charg√©s');
    console.log('  ‚úÖ Index automatiquement cr√©√©s par Mongoose');

    // 2. V√©rifier les collections existantes
    console.log('\nüìä √âtape 2 : V√©rification des donn√©es existantes...');
    
    const existingLobbyParticipants = await mongoose.connection.db.collection('lobbyparticipants').countDocuments();
    const existingGameParticipants = await mongoose.connection.db.collection('gameparticipants').countDocuments();
    
    console.log(`  üìà LobbyParticipants existants: ${existingLobbyParticipants}`);
    console.log(`  üìà GameParticipants existants: ${existingGameParticipants}`);

    // 3. Nettoyer les donn√©es de test/d√©veloppement si n√©cessaire
    if (existingLobbyParticipants > 0 || existingGameParticipants > 0) {
      console.log('\nüßπ √âtape 3 : Nettoyage des donn√©es de d√©veloppement...');
      
      const cleanupChoice = process.argv.includes('--clean');
      if (cleanupChoice) {
        await mongoose.connection.db.collection('lobbyparticipants').deleteMany({});
        await mongoose.connection.db.collection('gameparticipants').deleteMany({});
        console.log('  ‚úÖ Donn√©es de d√©veloppement nettoy√©es');
      } else {
        console.log('  ‚ö†Ô∏è  Utilisez --clean pour nettoyer les donn√©es existantes');
      }
    }

    // 4. V√©rification des quiz existants
    console.log('\nüìù √âtape 4 : V√©rification des quiz...');
    const quizCount = await Quiz.countDocuments();
    console.log(`  üìä Nombre de quiz: ${quizCount}`);

    if (quizCount > 0) {
      const quizWithCodes = await Quiz.countDocuments({ joinCode: { $exists: true, $ne: null } });
      console.log(`  üîë Quiz avec codes: ${quizWithCodes}`);
    }

    // 5. Test de cr√©ation d'une session de d√©monstration
    console.log('\nüß™ √âtape 5 : Test de cr√©ation d\'une session...');
    
    if (quizCount > 0) {
      const testQuiz = await Quiz.findOne();
      if (testQuiz && testQuiz.createdBy) {
        try {
          // Cr√©er une session de test
          const testSession = await GameSession.createSession(
            testQuiz._id,
            testQuiz.createdBy,
            {
              maxParticipants: 10,
              timePerQuestion: 30,
              showCorrectAnswers: true,
              allowLateJoin: false
            }
          );

          console.log(`  ‚úÖ Session de test cr√©√©e avec le code: ${testSession.sessionCode}`);
          
          // Nettoyer la session de test
          await GameSession.findByIdAndDelete(testSession._id);
          console.log('  üßπ Session de test supprim√©e');
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  Erreur test session: ${error.message}`);
        }
      } else {
        console.log('  ‚ö†Ô∏è  Pas de quiz avec utilisateur trouv√© pour le test');
      }
    }

    // 6. R√©capitulatif
    console.log('\nüìã R√©capitulatif de la migration:');
    console.log('  ‚úÖ Mod√®le GameSession pr√™t');
    console.log('  ‚úÖ Index cr√©√©s');
    console.log('  ‚úÖ Collections pr√©par√©es');
    console.log('  ‚úÖ Tests pass√©s');

    console.log('\nüéâ Migration termin√©e avec succ√®s !');
    console.log('\nüìñ Prochaines √©tapes:');
    console.log('  1. Red√©marrer le serveur backend');
    console.log('  2. Utiliser les nouvelles routes /api/session/*');
    console.log('  3. Les anciennes routes /api/quiz/* restent fonctionnelles');

  } catch (error) {
    console.error('‚ùå Erreur durant la migration:', error);
    throw error;
  }
}

async function checkMigrationStatus() {
  console.log('üîç V√©rification du statut de la migration...\n');

  try {
    // V√©rifier les collections
    const collections = await mongoose.connection.db.listCollections().toArray();
    const collectionNames = collections.map(c => c.name);

    console.log('üìä Collections pr√©sentes:');
    const requiredCollections = ['quizzes', 'users', 'questions', 'gamesessions', 'lobbyparticipants', 'gameparticipants'];
    
    requiredCollections.forEach(name => {
      const exists = collectionNames.includes(name);
      console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${name}`);
    });

    // V√©rifier les index de GameSession
    console.log('\nüîë Index GameSession:');
    const gameSessionIndexes = await mongoose.connection.db.collection('gamesessions').indexes();
    
    gameSessionIndexes.forEach(index => {
      console.log(`  ‚úÖ ${JSON.stringify(index.key)}`);
    });

    // Statistiques
    console.log('\nüìä Statistiques:');
    console.log(`  Quiz: ${await Quiz.countDocuments()}`);
    console.log(`  Sessions: ${await GameSession.countDocuments()}`);
    console.log(`  Lobby Participants: ${await LobbyParticipant.countDocuments()}`);
    console.log(`  Game Participants: ${await GameParticipant.countDocuments()}`);

  } catch (error) {
    console.error('‚ùå Erreur v√©rification:', error);
  }
}

async function main() {
  await connectDB();

  const command = process.argv[2];

  switch (command) {
    case 'migrate':
      await migrateToSessions();
      break;
    case 'check':
      await checkMigrationStatus();
      break;
    case 'help':
    default:
      console.log('üöÄ Script de migration vers l\'architecture des sessions\n');
      console.log('Usage:');
      console.log('  node scripts/migrate-to-sessions.js migrate [--clean]  # Effectuer la migration');
      console.log('  node scripts/migrate-to-sessions.js check             # V√©rifier le statut');
      console.log('  node scripts/migrate-to-sessions.js help              # Afficher cette aide');
      console.log('\nOptions:');
      console.log('  --clean  Nettoyer les donn√©es de d√©veloppement existantes');
      break;
  }

  await mongoose.connection.close();
  console.log('\nüîå Connexion ferm√©e');
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

main().catch(console.error);